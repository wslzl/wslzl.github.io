{"categories":[{"title":"前端","uri":"https://wslzl.github.io/categories/%E5%89%8D%E7%AB%AF/"},{"title":"技术","uri":"https://wslzl.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"title":"数据结构与算法","uri":"https://wslzl.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"},{"title":"日语","uri":"https://wslzl.github.io/categories/%E6%97%A5%E8%AF%AD/"},{"title":"编程语言","uri":"https://wslzl.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"posts":[{"content":"混合字符串排序\ngetCharType(c) { const code = { nul: 0, num: 1, alp: 3, ALP: 2, chn: 4, }; if (!isNaN(c)) { return code.num; } else if (/[_a-z]/.test(c)) { return code.alp; } else if (/[_A-Z]/.test(c)) { return code.ALP; } else if (/[\\u4e00-\\u9fa5]/.test(c)) { return code.chn; } else { return 0; } }, compareChar(x, y) { let xType = this.getCharType(x); let yType = this.getCharType(y); if (xType !== yType) { let c = xType \u0026lt; yType; return c ? -1 : 1; } else { if (x === y) if (xType === 4) { return x.localeCompare(y, 'zh'); } return x.localeCompare(y, 'en'); } }, noGroup.sort((x, y) =\u0026gt; { let a = x.pool.name; let b = y.pool.name; let result = 0; let i = 0; let len = Math.min(a.length, b.length); while (result === 0 \u0026amp;\u0026amp; i \u0026lt; len) { result = this.compareChar(a.charAt(i), b.charAt(i)); i++; } return result; }); ","id":0,"section":"posts","summary":"\u003cp\u003e混合字符串排序\u003c/p\u003e","tags":[""],"title":"混合字符串排序","uri":"https://wslzl.github.io/2020/07/%E6%B7%B7%E5%90%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/","year":"2020"},{"content":"《打上花火》歌词\nうちあげはなび よねづ けんし\nあの日見渡(ひみわた)した渚(なぎさ)を 今(いま)も思(おも)い出(だ)すんだ 砂(すな)の上(うえ)に刻(きざ)んだ言葉(ことば) 君(きみ)の後(うし)ろ姿(すがた) 寄(よ)り返(かえ)す波(なみ)が 足元(あしもと)をよぎり何(なに)かを攫(さら)う 夕凪(ゆうなぎ)の中(なか) 日暮(ひぐ)れだけが通(とお)り過(す)ぎて行(ゆ)く パッ(ぱっ)と光(ひか)って咲(さ)いた 花火(はなび)を見(み)ていた きっとまだ終(お)わらない夏(なつ)が 曖昧(あいまい)な心(こころ)を解(と)かして繋(つな)いだ この夜(よる)が続(つづ)いて欲(ほ)しかった 「あと何度君(なんどきみ)と同(おな)じ花火(はなび)を 見(み)られるかな」って 笑(わら)う顔(かお)に何(なに)ができるだろうか 傷(きず)つくこと喜(よろこ)ぶこと 繰(く)り返(かえ)す波(なみ)と情動(じょうどう) 焦燥最終列車(しょうそうさいしゅうれっしゃ)の音(おと) 何度(なんど)でも 言葉(ことば)にして君(きみ)を呼(よ)ぶよ 波間(なみま)を選(えら)びもう一度(いちど) もう二度(にど)と悲(かな)しまずに 済(す)むように はっと息(いき)を飲(の)めば 消(き)えちゃいそうな光(ひかり)が きっとまだ胸(むね)に住(す)んでいた 手(て)を伸(の)ばせば触(ふ)れた あったかい未来(みらい)は ひそかに二人(ふたり)を見(み)ていた パッ(ぱっ)と花火(はなび)が 夜(よる)に咲(さ)いた 夜(よる)に咲(さ)いて 静(しず)かに消(き)えた 離(はな)れないで もう少(すこ)しだけ もう少(すこ)しだけ パッ(ぱっ)と光(ひか)って咲(さ)いた 花火(はなび)を見(み)ていた きっとまだ終(お)わらない夏(なつ)が 曖昧(あいまい)な心(こころ)を解(と)かして繋(つな)いだ この夜(よる)が続(つづ)いて欲(ほ)しかった パッ(ぱっ)と花火(はなび)が 夜(よる)に咲(さ)いた 夜(よる)に咲(さ)いて 静(しず)かに消(き)えた 離(はな)れないで もう少(すこ)しだけ もう少(shǎo)しだけ ","id":1,"section":"posts","summary":"\u003cp\u003e《打上花火》歌词\u003c/p\u003e","tags":["歌词"],"title":"打上花火","uri":"https://wslzl.github.io/2020/02/%E6%89%93%E4%B8%8A%E8%8A%B1%E7%81%AB/","year":"2020"},{"content":"《My All》歌词\n一体(い った い) も う ど れ位 (く ら い) の時間(じ か ん) を i tta i mo~u~ do re ku ra i no ji ka n wo 到底 有多少时光 共(と も) に過(す) ご し て来 (き) た ん だ ろ う to mo ni su go shi te ki ta n da ro~u~ 我们一同经历 一体(い った い) も う ど れ位(く ら い) の距離(きょ り) を i tta i mo~u~ do re ku ra i no kyo ri wo 多少路程 共(と も) に進(す す) ん だ だ ろ う to mo ni su su n da da ro~u ~ 我们一起走过 僕 (ぼ く)達(た ち) が こ れ ま で に残 (の こ) し て き た bo ku ta chi ga ko re ma de ni no ko shi te ki ta 至今我们所留下的 完璧 (か ん ぺ き) じゃ な く と も キ ラ キ ラ し た ka n pe ki jya na ku to mo ki ra ki ra shi ta 虽然不够完美却也灿烂过 结晶(け っしょ う ) が今(い ま) こ こ に誇 (ほ こ) ら し げ に ke syo u ga i ma ko ko ni ho ko ra shi ge ni 如今在这里 那些结晶 輝（か が や） き 放(は　な)　って い る ka ga ya ki ha na tte i ru 正闪耀著骄傲的光辉 楽しい (た の し い) こ と嬉（う れ）し い こ と ta no shi i ko to u re shi i ko to 一直都那麽开心和快乐 ば か り だ った と は正直 （しょう じ き） ba ka ri da tta to wa syo~u~ji ki 坦白说并不是那麽回事 言(い) え な い け ど い つ で も i e na i ke do i tsu de mo 然而我们永远 ひ と り じゃ な か った か ら hi to ri jya na ka tta ka ra 都不会是孤身一人 あ な た に夢(ゆ め) を見(み) せ た い a na ta ni yu me wo mi se ta i 想让你看见梦想的所在 終(お わ) ら な く て消(き) え な く て o wa ra na ku te ki e na ku te 没有终结 没有消亡 そ ん な夢(ゆ め) を見(み) て欲(ほ) し い so n na yu me wo mi te ho shi i 真的很想看见那样的梦想 そ れ が僕(ぼ く) の願(ね が) い で す so re ga bo ku no ne ga i de su 那正是我的愿望 あ な た を守(ま も) って行(い) き た い a na ta wo ma mo tte i ki ta i 想要一直守护在你身旁 た と え何(な に) か お き よ う と も ta to e na ni ka o ki yo~u~ to mo 不管即将发生什麽 僕(ぼ く) の全(す べ) て で あ な た を bo ku no su be te de a na ta wo 我将用我的全部 守(ま も り) 続(つ づ) け て行(い) き ま す ma mo ri tsu zu ke te i ki ma su 一直将你守护 悔(く) や ん で る事(こ と) な ん て ひ と つ さ え ku ya n de ru ko to na n te hi to tsu sa e 从不曾有丝毫后悔 な い と今(い ま) で も言(い) い切(き) れ る よ na i to i ma de mo i i ki re ru yo 知道现在我都可以这样断言 僕達(ぼ く た ち) は い つ だ って全力(ぜ ん りょ く) で bo ku ta chi wa i tsu da tte ze n ryo ku de 我们一直都在竭尽全力地 戦(た た か) い抜(ぬ) い て来(き) た ta ta ka i nu i te ki ta 奋战到底 つ ら い夜(よ る) も や り き れ な い tsu ra i yo ru mo ya ri ki re na i 在那些铭心的夜晚 思(お も) い を し た 日々(ひ び) も正直(しょ う じ き) o mo i wo shi ta hi bi mo syo~u~ ji ki 事实上也会常常想起你 あ った け れ ど い つ で も a tta ke re do i tsu de mo 然而我们永远 ひ と り じゃ な か った か ら hi to ri jya na ka tta ka ra 都不是孤身一人 あ な た の笑颜(え が お) が見(み) え る a na ta no e ga o ga mi e ru 看到你的笑颜 愛(い と) お し く て眩(ま ぶ) し く て i to o shi ku te ma bu shi ku te 令人爱恋 令人目眩 そ の笑颜(え が お) が見(み) た く て so no e ga o ga mi ta ku te 多想再看到那样的笑颜 今日(きょ う ) も僕(ぼ く) は生(い) き て ま す kyo~u~ mo bo ku wa i ki te ma su 所以我仍活到今天 あ な た の愛(あ い) を感(か ん) じ る a na ta no a i wo ka n ji ru 我能感觉到你的爱 力(ち か ら)強(つ よ) く て温(あ た た) か い chi ka ra tsu yo ku te a ta ta ka i 有力而温暖 そ ん な無償(む しょ う ) の愛情(あ い じょ う ) を so n na mu syo~u~ no a i jyo~u~ wo 那样无偿的爱情 全身(ぜ ん し ん) で感(か ん) じ て ま す ze n shi n de ka n ji te ma su 我尽全力地感受著 あ な た に夢(ゆ め) を見(み) せ た い a na ta ni yu me wo mi se ta i 想让你看见梦想的所在 終(お) わ ら な く て消(き) え な く て o wa ra na ku te ki e na ku te 没有终结 没有消亡 そ ん な夢(ゆ め) を見(み) て欲(ほ) し い so n na yu me wo mi te ho shi i 真的很想让你看见那样的梦想 そ れ が僕(ぼ く) の願(ね が) い で す so re ga bo ku no ne ga i de su 那正是我的愿望 あ な た を守(ま も) って行(い) き た い a na ta wo ma mo tte i ki ta i 我想守护在你的身旁 た と え何(な に) が お き よ う と も ta to e na ni ka o ki yo~u~ to mo 不管即将发生什麽 僕(ぼ く) の全(す べ) て で あ な た を bo ku no su be te de a na ta wo 我将用我的全部 守(ま も) り続(つ ず) け て行(い) き ま す ma mo ri tsu zu ke te i ki ma su 一直将你守护 La...La... La...La... La...La... La...La... ","id":2,"section":"posts","summary":"\u003cp\u003e《My All》歌词\u003c/p\u003e","tags":["歌词"],"title":"My All","uri":"https://wslzl.github.io/2019/09/my-all/","year":"2019"},{"content":"Vue 实现拖拽\nVue.directive(\u0026quot;drag\u0026quot;, { bind(el, binding) { el.addEventListener(\u0026quot;mousedown\u0026quot;, (e) =\u0026gt; { let offX = e.clientX - el.offsetLeft; let offY = e.clientY - el.offsetTop; if (el.setCapture) { el.setCapture(); } const handlerMousemove = (e) =\u0026gt; { e.preventDefault(); let left = e.clientX - offX; let top = e.clientY - offY; let clientWidth = document.documentElement.clientWidth - el.clientWidth - 2; let clientHeight = document.documentElement.clientHeight - el.clientHeight - 2; // 禁止移出视图 left = left \u0026lt; 2 ? 2 : left; top = top \u0026lt; 2 ? 2 : top; left = left \u0026lt; clientWidth ? left : clientWidth; top = top \u0026lt; clientHeight ? top : clientHeight; el.style.opacity = \u0026quot;0.5\u0026quot;; el.style.cursor = \u0026quot;move\u0026quot;; // 限制轴向移动 if (binding.value.limitX \u0026amp;\u0026amp; binding.value.limitY) { return; } else if (binding.value.limitX \u0026amp;\u0026amp; !binding.value.limitY) { el.style.left = left + \u0026quot;px\u0026quot;; } else if (binding.value.limitY \u0026amp;\u0026amp; !binding.value.limitX) { el.style.top = top + \u0026quot;px\u0026quot;; } else { el.style.left = left + \u0026quot;px\u0026quot;; el.style.top = top + \u0026quot;px\u0026quot;; } }; const handlerMouseup = () =\u0026gt; { el.style.opacity = \u0026quot;1\u0026quot;; el.style.cursor = \u0026quot;default\u0026quot;; document.removeEventListener(\u0026quot;mousemove\u0026quot;, handlerMousemove); document.removeEventListener(\u0026quot;mouseup\u0026quot;, handlerMouseup); if (el.releaseCapture) { el.releaseCapture(); } }; document.addEventListener(\u0026quot;mousemove\u0026quot;, handlerMousemove); document.addEventListener(\u0026quot;mouseup\u0026quot;, handlerMouseup); }); }, }); ","id":3,"section":"posts","summary":"\u003cp\u003eVue 实现拖拽\u003c/p\u003e","tags":["Vue"],"title":"Vue实现拖拽","uri":"https://wslzl.github.io/2019/06/vue%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD/","year":"2019"},{"content":"Node.js 环境搭建\n基础配置 配置 插件与配置 prettier ES7 React/Redux/GraphQL/React-Native snippets\n To Do Tree  { \u0026quot;workbench.startupEditor\u0026quot;: \u0026quot;newUntitledFile\u0026quot;, \u0026quot;[vue]\u0026quot;: { \u0026quot;editor.defaultFormatter\u0026quot;: \u0026quot;esbenp.prettier-vscode\u0026quot; }, \u0026quot;todo-tree.tree.showScanModeButton\u0026quot;: false, \u0026quot;todo-tree.general.tags\u0026quot;: [\u0026quot;TODO\u0026quot;, \u0026quot;FIXME\u0026quot;, \u0026quot;TAG\u0026quot;, \u0026quot;DONE\u0026quot;, \u0026quot;NOTE\u0026quot;], \u0026quot;todo-tree.highlights.customHighlight\u0026quot;: { //添加内部 \u0026quot;TODO\u0026quot;: { \u0026quot;icon\u0026quot;: \u0026quot;check\u0026quot;, \u0026quot;foreground\u0026quot;: \u0026quot;#000\u0026quot;, \u0026quot;background\u0026quot;: \u0026quot;#cecb32\u0026quot;, \u0026quot;iconColour\u0026quot;: \u0026quot;#fffc43\u0026quot; }, \u0026quot;FIXME\u0026quot;: { \u0026quot;icon\u0026quot;: \u0026quot;alert\u0026quot;, \u0026quot;foreground\u0026quot;: \u0026quot;#fff\u0026quot;, \u0026quot;background\u0026quot;: \u0026quot;#ca4848\u0026quot;, \u0026quot;iconColour\u0026quot;: \u0026quot;#ff4343\u0026quot; }, \u0026quot;NOTE\u0026quot;: { \u0026quot;background\u0026quot;: \u0026quot;#f90\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;note\u0026quot;, \u0026quot;rulerColour\u0026quot;: \u0026quot;#f90\u0026quot;, \u0026quot;iconColour \u0026quot;: \u0026quot;#f90\u0026quot; }, \u0026quot;DONE\u0026quot;: { \u0026quot;background\u0026quot;: \u0026quot;#f90\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;issue-closed\u0026quot;, \u0026quot;rulerColour\u0026quot;: \u0026quot;#f90\u0026quot;, \u0026quot;iconColour \u0026quot;: \u0026quot;#f90\u0026quot; } } }  常用技巧","id":4,"section":"posts","summary":"\u003cp\u003eNode.js 环境搭建\u003c/p\u003e","tags":["开发工具"],"title":"VS Code使用心得","uri":"https://wslzl.github.io/2019/04/vscode%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/","year":"2019"},{"content":"Node.js 环境搭建\n一 基本配置 npm # 配置目录 npm config set prefix \u0026quot;D:\\Node.js\\node_global\u0026quot; npm config set cache \u0026quot;D:\\Node.js\\node_cache\u0026quot; # 环境变量 D:\\Node.js\\ Path D:\\Node.js\\node_global NODE_PATH D:\\Node.js\\node_global\\node_modules # 安装 npm install -g npm npm install -g npx # 更新源 npm config set registry https://registry.npm.taobao.org .npmrc registry https://registry.npm.taobao.org # 清理源 npm config delete registry npm config edit  常用命令 # 查看 npm -v # 查看本地仓库 npm list –g # 卸载 npm uninstall # 更新npm npm install npm -g # 备注 npm -S # npm --save npm -D # npm --save-dev  关于版本号 ~ 匹配最近的小版本依赖包 ^ 匹配最新的大版本依赖包\n二 开发环境 官方脚手架 # Vue npm install -g @vue/cli # Angular npm install -g @angular/cli # React npm install -g create-react-app  React npm install -g webpack npm install --save-dev webpack webpack-cli npm install --save react react-dom @types/react @types/react-dom npm install --save-dev typescript awesome-typescript-loader source-map-loader npm install --save-dev babel-loader @babel/preset-react @babel/preset-env @babel/core npm install webpack-dev-server --save-dev ","id":5,"section":"posts","summary":"\u003cp\u003eNode.js 环境搭建\u003c/p\u003e","tags":["开发环境"],"title":"Node.js 配置","uri":"https://wslzl.github.io/2019/04/node.js-%E9%85%8D%E7%BD%AE/","year":"2019"},{"content":"Hugo 安装配置\n安装  可参考 Hugo 中文文档\n 可将二进制文件 Hugo 加入环境变量，方便操作\n基本使用 hugo new site .  主题配置 在 index.html 添加内容才会编译\nGithub Action 自动化部署  生成非对称密钥 ssh-keygen -t rsa -b 4096 -C EMAIL  部署 Add deploy key 添加公钥，勾选 Allow write access 源码 Secrets 添加私钥，Name 设置为 ACTIONS_DEPLOY_KEY\n 项目文件配置自动化部署  name: CI on: push: branches: - master jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Setup Hugo uses: peaceiris/actions-hugo@v2.4.12 with: hugo-version: \u0026quot;latest\u0026quot; extended: true - name: Prepare submodule run: git submodule sync \u0026amp;\u0026amp; git submodule update --init - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3.6.4 with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} external_repository: wslzl/wslzl.github.io publish_dir: ./public publish_branch: master keep_files: false ","id":6,"section":"posts","summary":"\u003cp\u003eHugo 安装配置\u003c/p\u003e","tags":[""],"title":"Hugo安装配置","uri":"https://wslzl.github.io/2019/03/hugo%E9%85%8D%E7%BD%AE/","year":"2019"},{"content":"数据结构与算法学习\n一 基础知识 1.1 基本定义  逻辑结构：数据对象中数据元素之间的相互关系，分为集合结构、线性结构、树形结构、图形结构四类。\n物理（存储）结构：数据的逻辑结构在计算机中的存储形式，分为顺序存储结构、链式结构两类。\n  算法特性：有穷性、确定性、可行性、输入、输出。\n 1.2 复杂度 1.2.1 时间复杂度 复杂度排序\n$$O(1)\u0026lt;O(\\log_2{n})\u0026lt;O(n)\u0026lt;O(n\\log_2{n})\u0026lt;O(n^2)\u0026lt;O(n^3)\u0026lt;O(2^n)\u0026lt;O(n!)\u0026lt;O(n^n)$$\n1.2.2 空间复杂度 附表\nr：关键字基数，d：长度，n 关键字个数\n   排序方式 最好复杂度 平均复杂度 最坏复杂度 空间复杂度 稳定性 复杂性     冒泡排序 $O(n)$ $O(n^2)$ $O(n^2)$ $O(1)$ 稳定 简单   选择排序 $O(n^2)$ $O(n^2)$ $O(n^2)$ $O(1)$ 不稳定 简单   插入排序 $O(n)$ $O(n^2)$ $O(n^2)$ $O(1)$ 稳定 简单   希尔排序 $O(n)$ $O(n^{1.3})$ $O(n^2)$ $O(1)$ 不稳定 较复杂   归并排序 $O(n\\log_2{n})$ $O(n\\log_2{n})$ $O(n\\log_2{n})$ $O(n)$ 稳定 较复杂   快速排序 $O(n\\log_2{n})$ $O(n\\log_2{n})$ $O(n^2)$ $O(log_2{n})$ 不稳定 较复杂   堆排序 $O(n\\log_2{n})$ $O(n\\log_2{n})$ $O(n\\log_2{n})$ $O(1)$ 不稳定 较复杂   计数排序         桶排序         基数排序 $O(d(n+rd))$ $O(d(n+r))$ $O(d(n+r))$ $O(r)$ 稳定 较复杂    内存段划分  BSS 段  静态内存分配 未初始化的全局变量   数据段 Data  已初始化的全局变量、常量   代码段 Text  代码数据   堆  程序运行中动态分配的内存段   栈  用户存放程序临时创建的局部变量    方法  迭代 归纳 递归  简便 x \u0026raquo; 1 //除以二 x \u0026amp; 1 //判断奇偶性 x \u0026amp; (x-1) //验证是否为 2 的倍数 x = x \u0026amp; (x-1) //清空最低位的 1 x \u0026amp; ~x //清零 ~~x ≈ -(x+1)\n二 基本数据结构 2.1 线性表   数组\n 内存连续存放、迅速访问、增删麻烦    链表\n 内存非顺序存放、增删简单 单链表    2.2 栈和队列 2.2.1 栈  由于栈是一个表，因此，任何实现表的方法都能实现栈。 —— 《数据结构与算法分析：C 语言描述》\n   后进先出\n  遍历需开辟临时空间\n  先进先出\n  头尾遍历\n  2.2.2 队列 2.2.3 优先队列、堆 2.2.4 多级反馈队列 2.3 哈希表   原理\n  哈希冲突\n 开放地址法  线性探测再散列 平方探测再散列 随机探测再散列   链地址法 公共溢出区法 再散列    查找效率\n 哈希函数 哈希冲突处理 哈希表饱和度    2.4 树 二叉树  特点\n - 每个结点最多有两颗子树 - 左子树和右子树是有顺序的 - 即使树中某结点只有一棵子树，也要区分它是左子树还是右子树   性质\n - 二叉树的第i层上最多有$2^{i-1}$个节点 (i\u0026gt;=1) - 二叉树中如果深度为k,那么最多有$2^k-1$个节点 (k\u0026gt;=1）   二叉树的遍历\n - 前序遍历 - 中序遍历 - 后序遍历 - 层序遍历    斜树\n 左斜树 所有节点都只有左子树 右斜树 所有节点都只有右子树    满二叉树\n 所有分支节点都有左子树和右子树    完全二叉树\n 若设二叉树的深度为 h，除第 h 层外，其它各层 (1 ～(h-1)层) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边    二叉查找树 (Binary Sort Tree)\n 二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：  若左子树不空，则左子树上所有结点的值均小于它的根结点的值 若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值 左、右子树也分别为二叉排序树 没有键值相等的节点。      平衡二叉树 (Balanced Binary Tree)\n 它是一 棵空树或它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树 AVL 树 红黑树  红黑树是一种自平衡二叉查找树      线索二叉树 (Threaded BinaryTree)\n  霍夫曼树\n  二叉排序树\n  B 树\n 一种树状数据结构，能够用来存储排序后的数据 B 树作为一种多路搜索树，m 阶 B 树满足以下条件  每个节点至多拥有 m 棵子树 根节点至少拥有两颗子树 除了根节点外，每个分支节点至少拥有 m/2 棵子树 所有叶子节点都在同一层上 更适合文件索引系统      B+ 树\n 性质  所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的 不可能在非叶子结点命中 非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层      B* 树\n  字典树 / Trie 树\n 性质  根节点不包含字符，除根节点外每一个节点都只包含一个字符 从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串 每个节点的所有子节点包含的字符都不相同      2.5 图 三、算法 3.1 基础算法 3.1. 1 十大排序算法 （1）简单排序\n 插入排序 选择排序 冒泡排序  （2）分治排序\n 快速排序 归并排序（必学，快速排序还要关注中轴的选取方式）  （3）分配排序\n 桶排序 基数排序  （4）树状排序\n 堆排序  （5）其他\n 计数排序 希尔排序  3.1. 2 图论算法 （1）图的表示：邻接矩阵和邻接表 （2）遍历算法：深度搜索和广度搜索(必学) （3）最短路径算法：Floyd，Dijkstra （4）最小生成树算法：Prim，Kruskal （5）实际常用算法：关键路径、拓扑排序 （6）二分图匹配：配对、匈牙利算法 （7）拓展：中心性算法、社区发现算法\n3.1.3 搜索与回溯算法 （1）贪心算法\n（2）启发式搜索算法：A*寻路算法\n（3）地图着色算法、N 皇后问题、最优加工顺序\n（4）旅行商问题\n3.1.4 动态规划 （1）树形 DP：01 背包问题\n（2）线性 DP：最长公共子序列、最长公共子串\n（3）区间 DP：矩阵最大值（和以及积）\n（4）数位 DP：数字游戏\n（5）状态压缩 DP：旅行商\n3.1.5 字符匹配算法 （1）正则表达式\n（2）模式匹配：KMP、Boyer-Moore\n3.1.6 流相关算法 （1）最大流：最短增广路、Dinic 算法\n（2）最大流最小割：最大收益问题、方格取数问题\n（3）最小费用最大流：最小费用路、消遣\n3.2 进阶算法 3.2.1 数据查找 3.2.2 数据搜索 3.2.3 字符串处理 3.2.4 动态规划 3.2.5 图论算法 3.3 高等数学 3.3.1 数论 3.3.2 组合数学 3.3.3","id":7,"section":"posts","summary":"\u003cp\u003e数据结构与算法学习\u003c/p\u003e","tags":[""],"title":"数据结构与算法学习","uri":"https://wslzl.github.io/2019/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/","year":"2019"},{"content":"《幽灵公主》歌词\nはりつめた弓(ゆみ)の ふるえる弦(つる)よ 月(つき)の光(ひかり)にざわめく おまえの心(こころ) とぎすまされた刃(やいば)の美(うつく)しい そのきっさきによく似(に)た そなたの横颜(よこがお) 悲(かな)しみと怒(いか)りにひそむ まことの心(こころ)を知(し)るは 森(もり)の精(せい) もののけ达(たち)だけ もののけ达(たち)だけ ","id":8,"section":"posts","summary":"\u003cp\u003e《幽灵公主》歌词\u003c/p\u003e","tags":["歌词"],"title":"幽灵公主","uri":"https://wslzl.github.io/2018/11/%E5%B9%BD%E7%81%B5%E5%85%AC%E4%B8%BB/","year":"2018"},{"content":"《いつも何度(なんど)も》歌词\nいつも何度(なんど)も （呗(うた)：木村弓(きむらゆみ)）\n呼(よ)んでいる 胸(むね)のどこか奥(おく)で いつも心踊(こころおど)る 梦(ゆめ)を见(み)たい 悲(かな)しみは 数(かぞ)えきれないけれど その向(む)こうできっと あなたに会(あ)える 缲(く)り返(かえ)す あやまちの そのたびひとは ただ青(あお)い空(そら)の青(あお)さを知(し)る 果(は)てしなく 道(みち)は続(つづ)いて见(み)えるけれど この両手(りょうて)は 光(ひかり)を抱(だ)ける さよならの时(とき)の 静(しず)かな胸(むね) ゼロ(ぜろ)になる体(からだ)が 耳(みみ)をすませる 生(い)きている不思议(ふしぎ) 死(し)んでゆく不思议(ふしぎ) 花(はな)も 风(ふう)も 町(まち)もみんな同(おな)じ 呼(よ)んでいる 胸(むね)のどこか奥(おく)で いつも何度(なんど)でも 梦(ゆめ)を描(か)こう 悲(かな)しみの数(かず)を 言(い)い尽(つ)くすより 同(おな)じ唇(くちびる)で そっと歌(うた)おう 闭(と)じてゆく 思(おも)い出(で)のその中(なか)にいつも 忘(わす)れたくない 嗫(ささや)きを闻(き)く こなごなに 砕(くだ)かれた镜(かがみ)の上(うえ)にも 新(あたら)しい景色(けしき)が 映(うつ)される 始(はじ)まりの朝(あさ)の静(しず)かな窓(まど) ゼロ(ぜろ)になる体(からだ) 充たされてゆけ 海(うみ)の彼方(かなた)にはもう探(さが)さない 辉(かがや)くのは いつもここに わたしの中(なか)に 见(み)つけられたから ","id":9,"section":"posts","summary":"\u003cp\u003e《いつも何度(なんど)も》歌词\u003c/p\u003e","tags":["歌词"],"title":"いつも何度(なんど)も","uri":"https://wslzl.github.io/2018/09/%E6%B0%B8%E8%BF%9C%E5%90%8C%E5%9C%A8/","year":"2018"},{"content":"《茜さす》歌词\nあの地平线(ちへいせん) 辉(かがや)くのは どこかに君(きみ)を隠(かく)しているから たくさんの灯(ひ)が 懐(なつ)かしいのは あのどれかひとつに 君(きみ)がいるから さあ出(で)かけよう 一切(ひとき)れのパン ナイフ ランプ 鞄(かばん)につめ込(こ)んで 父(とう)さんが残(のこ)した热(あつ)い想(おも)い 母(かあ)さんがくれたあのまなざし 地球(ちきゅう)は回(まわ)る君(きみ)を隠(かく)して 辉(かがや)く瞳(ひとみ)きらめく灯(ともしび) 地球(ちきゅう)は回(まわ)る 君(きみ)をのせて いつか きっと出逢(であ)う仆(ぼく)らをのせて 父(とう)さんが 残(のこ)した热(あつ)い想(おも)い 母(かあ)さんが くれたあのまなざし 地球(ちきゅう)は回(まわ)る 君(きみ)を隠(かく)して 辉(かがや)く瞳 (ひとみ)きらめく灯(ともしび) 地球(ちきゅう)は回(まわ)る 君(きみ)をのせて いつかきっと出逢(であ)う仆(ぼく)らをのせて\n","id":10,"section":"posts","summary":"\u003cp\u003e《茜さす》歌词\u003c/p\u003e","tags":["歌词"],"title":"天空之城","uri":"https://wslzl.github.io/2018/06/%E5%A4%A9%E7%A9%BA%E4%B9%8B%E5%9F%8E/","year":"2018"},{"content":"Markdown 学习\n  运算符\n$\\pm$ : \\pm\n$\\times$ : \\times\n$\\div$ : \\div\n$\\cdot$ : \\cdot\n$\\leq$ : \\leq\n$\\geq$ : \\geq\n$\\neq$ : \\neq\n$\\approx$ : approx\n$\\infty$ : \\infty\\\n$\\equiv$ : \\equiv\n$\\sum$ : \\sum\n$\\prod$ : \\prod\n$\\angle$ : \\angle\n$\\because$ : because\n$\\therefore$ : therefore\n$\\forall$ : \\forall\n$\\exists$ : \\exists\n$\\in$ : \\in\n$\\notin$ : \\notin\n$\\subset$ : \\subset\n$\\supset$ : \\supset\n$\\emptyset$ : emptyset\n$\\bigoplus$ : \\bigoplus\n$\\bigotimes$ : \\bigotimes\n$\\bigcup$ : \\bigcup\n$\\bigcap$ : \\bigcap\n$\\bigvee$ : \\bigvee\n$\\bigwedge$ : \\bigwedge\n$\\uparrow$ : \\uparrow\n$\\downarrow$ : downarrow\n$\\Uparrow$ : \\Uparrow\n$\\Downarrow$ : \\Downarrow\n$\\longleftarrow$ : \\longleftarrow\n$\\longrightarrow$ : \\longrightarrow\n$\\Longleftarrow$ : \\Longleftarrow\n$\\Longrightarrow$ : Llongrightarrow\n$\\leftrightarrow$ : \\leftrightarrow\n$\\rightleftharpoons$ : \\rightleftharpoons\n$\\nearrow$ : \\nearrow\n$\\searrow$ : \\searrow\n  希腊字母\n     大写 代码 小写 代码 大写 代码 小写 代码     A A $\\alpha$ \\alpha N N $\\nu$ \\nu   B B $\\beta$ \\beta $\\Xi$ \\Xi $\\xi$ \\xi   $\\Gamma$ \\Gamma $\\gamma$ \\gamma O O o o   $\\Delta$ \\Delta $\\delta$ \\delta $\\Pi$ \\Pi $\\pi$ \\pi   E E $\\epsilon$ \\epsilon P P $\\rho$ \\rho   Z Z $\\zeta$ \\zeta $\\Sigma$ \\Sigma $\\sigma$ \\sigma   H H $\\eta$ \\eta T T $\\tau$ \\tau   $\\Theta$ \\Theta $\\theta$ \\theta $\\Upsilon$ \\Upsilon $\\upsilon$ \\upsilon   I I $\\iota$ \\iota $\\Phi$ \\Phi $\\phi$ \\phi   K K $\\kappa$ \\kappa X X $\\chi$ \\chi   $\\Lambda$ \\Lambda $\\lambda$ \\Lambda $\\Psi$ \\Psi $\\psi$ \\psi   M M $\\mu$ \\mu $\\Omega$ \\Omega $\\omega$ \\omega      分数\n$\\frac{x}{y}$ : \\frac{x}{y}\n  根号\n$\\sqrt[n]{x}$ : \\sqrt[n]{x}\n  矢量\n$\\vec{a} \\cdot \\vec{b} = 0$ : \\vec{a} \\cdot \\vec{b} = 0\n  方程组\n$$\\begin{cases} x \\ y \\end{cases}$$\n  极限\n$\\lim\\limits_{n\\rightarrow+\\infty}$ : \\lim\\limits_{n\\rightarrow+\\infty}\n  累加\n$\\sum_{i=0}^n i$ : \\sum_{i=0}^n i\n  累乘\n$\\prod_{i=0}^n$ : \\prod_{i=0}^n\n  矩阵\n$$ \\begin{matrix}1 \u0026amp; 2 \u0026amp; 3\\4 \u0026amp; 5 \u0026amp; 6\\7 \u0026amp; 8 \u0026amp; 9\\end{matrix} $$\n  积分\n$\\int$ : \\int\n$\\iint$ : \\iint\n$\\iiint$ : \\iiint\n$\\oint$ : \\oint\n$\\partial$ : \\partial\n  $e^{i\\theta}=cos\\theta + i\\sin\\theta$\n$\\xi =\\begin{bmatrix}\\ -\\omega \\times q\\ \\ \\omega \\end{bmatrix}$\n","id":11,"section":"posts","summary":"\u003cp\u003eMarkdown 学习\u003c/p\u003e","tags":[""],"title":"Markdown 学习","uri":"https://wslzl.github.io/2018/06/markdown/","year":"2018"},{"content":"导出文件\nexportExcel() { this.exportLoading = true; getFile(params) .then(res =\u0026gt; { let eleLink = document.createElement('a'); eleLink.style.display = 'none'; eleLink.setAttribute('download', ''); eleLink.href = res.url; document.body.appendChild(eleLink); eleLink.click(); document.body.removeChild(eleLink); }) .finally(() =\u0026gt; { this.exportLoading = false; }); }, ","id":12,"section":"posts","summary":"\u003cp\u003e导出文件\u003c/p\u003e","tags":[""],"title":"导出文件","uri":"https://wslzl.github.io/2018/05/%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6/","year":"2018"},{"content":"ECharts 学习\nposition: function(point, params, dom) { // 固定在顶部 // 解决右侧超出容器被隐藏 dom.style.transform = 'translateZ(0)'; },  渐变 import echarts from 'echarts'; // Vue引入echarts const color = new echarts.graphic.LinearGradient(0, 0, 0, 1, [ { offset: 0, color: 'rgba(250,145,60,0.1)', }, { offset: 1, color: '#fff', }, ]), ","id":13,"section":"posts","summary":"\u003cp\u003eECharts 学习\u003c/p\u003e","tags":["开发环境"],"title":"ECharts学习","uri":"https://wslzl.github.io/2018/05/echarts/","year":"2018"},{"content":"《茜さす》歌词\n枯叶舞(かれはま)う 町角(まちかど)を 駆(か)け抜(ぬ)けてく乾(かわ)いた风(かぜ) 伸(の)びた影(かげ)と悲调并木(ひちょうなみき) 季节(きせつ)を见(み)てたかった 返事(へんじ)のない呼(よ)ぶ声(こえ)は あっという间掻(まか)き消(け)されてしまう 目抜(めぬ)き通(どお)り人波(ひとなみ)抜(ぬ)けて どこか远(とお)く 谁(だれ)もいない场所(ばしょ)へ 気(き)づいていたのに 何(なに)も知(し)らないふり 一人(ひとり)きりでは 何(なに)も出来(でき)なかった 出会(であ)えた幻(まぼろし)に さよならを 茜(あかね)さすこの空(そら)に 零(こぼ)れた弱(よわ)さに 手(て)のひらを 一轮(いちりん)のあだ花(ばな) そんなふうに 愿(ねが)い叶(かな)え 痛(いた)みを知る 渡(わた)り鸟(どり)の鸣(な)く声(こえ)も 赤(あか)く染(そ)まる云(くも)に消(き)えてしまう 帰(かえ)り道(みち)も远(とお)く离(はな)れて 今(いま)は独(ひと)り 谁(だれ)もいない场所(ばしょ)で 気(き)づいた景色(けしき)の色(いろ)に触(ふ)れたとしても 一人(ひとり)きりでは声(こえ)も出(だ)せなかった 爱(あい)した幻(まぼろし)に口(くち)づけを 黄昏(たそがれ)たこの空(そら)に まだ昨夜(ゆうべ)の星灯(ほしとも)らない 待宵(まちよい)の胧(おぼろ)げ月(つき)はどこに 引(ひ)き裂(さ)かれて痛(いた)みを知(し)る 缲(く)り返(かえ)す日々(ひび)の中(なか)で探(さが)してたのは 歩(ある)き続(つづ)けるための愿(ねが)い 出会(であ)えた幻(まぼろし)に さよならを 憧(あこが)れはこの空(そら)に 流(なが)れた月日(つきひ)を 手(て)のひらに ひとひらの花(はな)びら そんなふうに 痛(いた)み重(かさ)ね 出会(であ)いを知(し)る 出会(であ)い重(かさ)ね 愿(ねが)いを知(し)る ","id":14,"section":"posts","summary":"\u003cp\u003e《茜さす》歌词\u003c/p\u003e","tags":["歌词"],"title":"茜さす","uri":"https://wslzl.github.io/2017/12/%E8%8C%9C%E3%81%95%E3%81%99/","year":"2017"},{"content":"Git 学习\n一 安装配置 二 基本使用  workplace 工作区 staging area 暂存区/缓存区 local repository 本地仓库 remote repository 远程仓库  2.1 初始化仓库 git init git init \u0026quot;dir\u0026quot; # 指定目录  2.2 添加文件到暂存区 git add \u0026quot;file name\u0026quot;  2.3 添加暂存区内容到本地仓库 git commit -m \u0026quot;message\u0026quot;  2.4 文件状态  untrack 未记录 modified 已修改 staged 已暂存 committed 已提交  三 分支管理 git branch # 创建分支 git branch \u0026quot;branchname\u0026quot; # 切换分支 git checkout \u0026quot;branchname\u0026quot; # 合并 git merge \u0026quot;branchname\u0026quot; # 删除分支 git branch -d \u0026quot;branchname\u0026quot;  四 远程仓库 4.1 创建 SSH Key ssh-keygen -t rsa -C \u0026quot;youremail@example.com\u0026quot;  4.2 Github 配置 SSH Keys 4.3 本地仓库配置 git remote add origin git@github.com:username/repositoryname.git # 推送到远程仓库 git push origin master # 远程仓库为空时首次推送需加上 -u 参数 git push -u origin master  无共同祖先 git pull origin master \u0026ndash;allow-unrelated-histories\n","id":15,"section":"posts","summary":"\u003cp\u003eGit 学习\u003c/p\u003e","tags":["开发环境"],"title":"Git学习","uri":"https://wslzl.github.io/2017/09/git/","year":"2017"},{"content":"Vue 填坑\n常用 \u0026lt;script\u0026gt; export default { name: '', data() { return { x: 'Hello', y: 'World', } } methods: { doSomething() { return {x, y} = this; } } } \u0026lt;/script\u0026gt;  小心 $emit 传入的事件名称只能使用小写，不能使用大写的驼峰规则命名 @do-some=\u0026ldquo;doSome\u0026rdquo;\n$emit(\u0026lsquo;do-some\u0026rsquo;, x);\nCumputed Watch  computed 通过几个数据的变化，影响一个数据 watch 通过一个数据的变化，影响多个数据\n computed: { demo () { get () { }, default: [] // 定义默认值 } }  自定义指令 自定义指令不能定义在 new Vue 之后\nElement UI  修改图标  /deep/ .el-icon-arrow-down:before { content: \u0026quot;\\e72e\u0026quot;; font-size: 18px; font-family: \u0026quot;iconfont\u0026quot; !important; }  // 绑定 :class=\u0026quot;[ { valid: isSeatValid(seat), invalid: isSeatInvalid(seat), checked: seat.checked, }, getMinerStatus(seat), ]\u0026quot;\nElelment  修改 el-select-option 属性  :popper-append-to-body=\u0026quot;false\u0026quot;  /deep/.el-select-dropdown__wrap { width: 290px; max-height: 315px; }   v-cloak  [v-cloak]{ display:none; } ","id":16,"section":"posts","summary":"\u003cp\u003eVue 填坑\u003c/p\u003e","tags":["Vue"],"title":"Vue填坑","uri":"https://wslzl.github.io/2017/09/vue%E5%A1%AB%E5%9D%91/","year":"2017"},{"content":"SCSS 学习\n编码格式 // 一般文件头部设定编码格式 @charset 'utf-8';  注释 // 只存在于scss源文件中 /* */ 保留至编译文件中 /*！ */ 即使压缩模式编译，依然保留  嵌套 // 建议嵌套不要超过三层 ul { li { a { // \u0026amp; 表示父元素选择器 \u0026amp;:hover { color: blue; } } } }  变量 $blue: #00f; // 插值语句 #{} .backcolor-#{$blue} { background-color: $blue; }  $map: ( r: #f00, g: #0f0, b: #00f, ); @each $name, $c in $array { color-#{$name}: $c; }  引入 @import \u0026quot;path/filename.scss\u0026quot;;  继承 @extend .class0;  混合 @mixin border-radius($radius) { -webkit-border-radius: $radius; -moz-border-radius: $radius; -ms-border-radius: $radius; border-radius: $radius; } div { @include border-radius(10px); }  占位符选择器  如果不是需要传递参数的 mixin，建议通过占位实现\n %bg-color { background-color: blue; } .div1 { @extend %bg-color; } .div2 { @extend %bg-color; }  循环 // 包含最后一个元素 @for $i from 1 through 10 { } // 不包含最后一个元素 @for $i from 1 to 10 { }  函数 技巧 $m-size: ( xxxl: 40px, xxl: 24px, xl: 20px, m: 16px, ms: 12px, s: 8px, xs: 4px, auto: auto, ); @each $key, $value in $m-size { .mt-#{$key} { margin-top: $value; } } ","id":17,"section":"posts","summary":"\u003cp\u003eSCSS 学习\u003c/p\u003e","tags":[""],"title":"SCSS","uri":"https://wslzl.github.io/2017/08/scss/","year":"2017"},{"content":"JavaScript 填坑\n基础 没有原型的函数  箭头函数 bind 后的函数  toFixed Math.floor 向上取整 Math.around 四舍五入 Math.ceil 向下取整\ntoFixed 四舍六入，五是坑\n存储带变量 localstorage.setItem(`id_${userId}`, userInfo);  toString // JS 里的数字是用浮点数来保存的 // 会将.认为是小数点 1231231231.toString(16); // Error (1231231231).toString(16);\n拖拽 mousedown 事件加在拖拽元素上 mouseover, mouseup 事件必须在 mousedown 事件内部绑定，且需要绑定在 document 对象上\n concat 不是在原数组上操作\n const 和 let 在全局声明的变量不会挂载到全局对象 window 上面\n通过给 a 标签添加 download 属性，即可实现在点击的时候直接下载 href 属性指向的资源\nremoveEventListener 和 addEventListener 的三个参数必须相同，才能保证能够正确的移除对应事件\n回车的断行事件是在 keydown 结束后和 keyup 结束前触发的， 所以如果要在按回车的时候阻止默认事件， 应该在 keydown 里面进行。\n当一个节点从 dom 中移除的时候将会触发其 blur 事件\n","id":18,"section":"posts","summary":"\u003cp\u003eJavaScript 填坑\u003c/p\u003e","tags":["JavaScript"],"title":"JavaScript填坑","uri":"https://wslzl.github.io/2017/07/javascript%E5%A1%AB%E5%9D%91/","year":"2017"},{"content":"JavaScript 常用\n类型 判断类型 const isType = (type) =\u0026gt; (target) =\u0026gt; `[object ${type}]` === Object.prototype.toString.call(target);  string 强制类型转换 \u0026quot;123\u0026quot; * 1 + \u0026quot;123\u0026quot;;  位运算 !!( // Bool ~~num ); // Math.floor num | 0; // 取整 num \u0026amp; 1; // 判断奇偶  数组 置空 array.length = 0;  填充 let initializeArray = (n, value = 0) =\u0026gt; Array(n).fill(value);  克隆 const _arr = []; const arr = [..._arr];  交换 let x = 3; let y = 4; [x, y] = [y, x];  合并 const arr1 = []; const arr2 = []; const arr = [...arr1, ...arr2];  去重 const unique = (array) =\u0026gt; Array.from(new Set(array)); const unique = (array) =\u0026gt; [...new Set(array)];  计数 const count = (array, value) =\u0026gt; array.reduce((a, v) =\u0026gt; (v === value ? a + 1 : a + 0), 0);  最值 const arrayMax = (array) =\u0026gt; Math.max(...array); const arrayMin = (array) =\u0026gt; Math.min(...array);  相似 const similarity = (array, values) =\u0026gt; array.filter((v) =\u0026gt; values.includes(v));  求和 const total = (array) =\u0026gt; array.reduce((prev, cur) =\u0026gt; { return prev + cur; });  平均 const average = (array) =\u0026gt; array.reduce((prev, cur) =\u0026gt; prev + cur, 0) / array.length;  排序 const cnSort = (array) =\u0026gt; array.sort((a, b) =\u0026gt; a.localeCompare(b, \u0026quot;zh-Hans-CN\u0026quot;), { sensitivity: \u0026quot;accent\u0026quot;, });  对象 克隆 const _obj = {}; const obj1 = { ..._obj }; const obj2 = JSON.parse(JSON.stringify(_obj));  合并 const obj1 = {}; const obj2 = {}; const obj = { ...obj1, ...obj2 };  时间戳 const timestamp = +new Date(\u0026quot;2020-02-02\u0026quot;);  函数 自执行 const Func = (function () {})(); (function () {})(); (function () {})(); [(function () {})()]; +(function () {})(); -(function () {})(); ~(function () {})(); !(function () {})(); new (function () {})(); new (function () {})(); void (function () {})(); typeof (function () {})(); delete (function () {})(); 1, (function () {})(); 1 ^ (function () {})(); 1 \u0026gt; (function () {})();     Math.min() \u0026gt; Math.max Math.min() 不传参数返回 Infinity Math.max() 不传参数返回 -Infinity\n  es7 includes includes 可以判断 NaN，indexOf 不可以\n  数据类型强制转换\n  const str = \u0026quot;369\u0026quot;; // 加减运算符 +str - str; // 快速获取布尔值 !!str;   有条件的对象  function(isTrue) { return { id: 0, name: 'js', ...isTrue \u0026amp;\u0026amp; {others: 'others'} } }   提取属性  const obj = { x: 1, y: 2, z: 3 }; const { x, ...others } = obj;   解构赋默认值  const obj = { x: 1, y: 2, z: 3 }; const { x = 4, w = 5 } = obj;   获取时间戳  const t = new Date(); // 1 默认末尾三位数为0 Date.parse(t); // 2 t.getTime(); // 3 a.valueOf() + // 4 a;   中文排序  array.sort((a, b) =\u0026gt; { a.localCompare(b, \u0026quot;zh-Hans-CN\u0026quot;, { sensitivity: \u0026quot;accent\u0026quot; }); }); ","id":19,"section":"posts","summary":"\u003cp\u003eJavaScript 常用\u003c/p\u003e","tags":["JavaScript"],"title":"JavaScript常用","uri":"https://wslzl.github.io/2017/07/javascript%E5%B8%B8%E7%94%A8/","year":"2017"},{"content":"CSS 填坑\n动画 动画暂停 div:hover { animation-play-state: paused; }  坑 height: auto; // 会导致 transition 失效\nhover 加边框抖动 默认加加 padding\nfont 缩写时，font-size 和 font-family 是必须值\n背景图片位置 backgroung-position: center center;\n","id":20,"section":"posts","summary":"\u003cp\u003eCSS 填坑\u003c/p\u003e","tags":["CSS"],"title":"CSS填坑","uri":"https://wslzl.github.io/2017/07/css%E5%A1%AB%E5%9D%91/","year":"2017"},{"content":"CSS 学习\n风格 类命名 .wrapper .header .container;  属性 1.书写\n  显示\n display position    属性\n width/height padding/margin border background    文本 - color - font - text-decoration - text-align 2.原则\n  属性值为 0，忽略单位\n  属性值为小数，且整数部分为 0，忽略整数部分\n  \u0026amp;nbsp \u0026amp;ensp/半个汉字宽度 \u0026amp;emsp/一个汉字宽度\n  max-width 权值比 !important 大\n  relative 对 fixed 并无效果，fixed 相对定位的元素只能是 html\n  /* a 没有文本值，href 属性有链接，显示链接 */ a[href^=\u0026quot;http\u0026quot;]:empty::before { content: attr(href); } ","id":21,"section":"posts","summary":"\u003cp\u003eCSS 学习\u003c/p\u003e","tags":["CSS"],"title":"CSS学习","uri":"https://wslzl.github.io/2017/07/css%E5%AD%A6%E4%B9%A0/","year":"2017"},{"content":"Hello World!\n","id":22,"section":"posts","summary":"Hello World!","tags":null,"title":"Hello World","uri":"https://wslzl.github.io/2017/07/hello-world/","year":"2017"}],"tags":[{"title":"CSS","uri":"https://wslzl.github.io/tags/css/"},{"title":"JavaScript","uri":"https://wslzl.github.io/tags/javascript/"},{"title":"Vue","uri":"https://wslzl.github.io/tags/vue/"},{"title":"开发工具","uri":"https://wslzl.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"},{"title":"开发环境","uri":"https://wslzl.github.io/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"title":"歌词","uri":"https://wslzl.github.io/tags/%E6%AD%8C%E8%AF%8D/"}]}